
            /// ARPEGIOS
            Key key = new Key(strInput);
            Integer [] a = key.generateKey();
            strInput = key.getStrInput();
            Melody melody = new Melody(a);

//            for(int i = 1; i < a.length; i++){
//                System.out.print(a[i] + " ");
//            }
            String patternString = "V0 ";
            for(int i = 0; i < 25; i++) {
                melody.addRandomMelody(patternString, null, strInput);
                strInput = melody.getStrInput();
                patternString=melody.getPatternString();
            }
            pattern.add(melody.getPatternString());
//
            patternString += "V1 ";
            Arpeggios arpeggios = new Arpeggios(patternString);
            arpeggios.upUp(new String[] {"C3q","E3q","G3q"} ,6);
            pattern.add(arpeggios.getPatternString());



___________________________________________________________________________________________________




            //// TEST DRUMS

//            Drums drums = new Drums(strInput);
//            Rhythm rhythm = drums.generateDrums();
////            strInput = drums.getStrInput();
//            pattern.add(rhythm);
//            MidiFileManager.savePatternToMidi(pattern, new File("miusik.mid"));
//            Pattern mainPattern = MidiFileManager.loadPatternFromMidi(new File("miusik.mid"));
//            System.out.println(mainPattern.toString());
//            drums.parseDrums(mainPattern.toString());
//            String strOutput = drums.getStroutput();
//            midiUtils.evaluateDeciphering(strInput,strOutput);

            //// TEST DRUMS END


_______________________________________________________________________________________________________


            Key key = new Key(strInput);
            Integer [] a = key.generateKey();
            strInput = key.getStrInput();
            Melody melody = new Melody(a);

            //      random melody and arpegios

            String patternString = "V0 ";
            for(int i = 0; i < 25; i++) {
                melody.addRandomMelody(patternString, null, strInput);
                strInput = melody.getStrInput();
                patternString=melody.getPatternString();
            }
            pattern.add(melody.getPatternString());
//
            patternString += "V1 ";
            Arpeggios arpeggios = new Arpeggios(patternString);
            arpeggios.upUp(new String[] {"C3q","E3q","G3q"} ,6);
            pattern.add(arpeggios.getPatternString());

            MidiFileManager.savePatternToMidi(pattern, new File("miusik.mid"));
            Pattern mainPattern = MidiFileManager.loadPatternFromMidi(new File("miusik.mid"));
            System.out.println(mainPattern.toString());

_________________________________________________________________________________________________


                // LYDIAN MODE

                // pitches: c c# d eb e  f f# g g# a bb b c
                //          0 1  2  3 4  5 6  7  8 9 10 11 12
                //    c lyd:
                //           0  2  4 6 7  9  11 12

//                if( (i % 12 == 1)||(i % 12 == 3)||(i % 12 == 5)||(i % 12 == 8)||(i % 12 == 10)  )
//                    System.out.print("");
//                else
//                    System.out.print(i+b + " ");


__________________________________________________________________________________________


//                      test arpegios

            Arpeggios arpeggios = new Arpeggios("V1 ");
            String notes[] = new String[] {
                    "60i", "64i", "67i", "72i", "76i", "79i", "84i", "79i", "76i", "72i", "67i", "64i" };
            arpeggios.arpegiate(notes,2);
            notes = new String[] {
                    "60i", "64i", "69i", "72i", "76i", "81i", "84i", "81i", "76i", "69i", "67i", "64i" };
            arpeggios.arpegiate(notes,2);
            notes = new String[] {
                    "60i", "65i", "69i", "72i", "77i", "81i", "84i", "81i", "77i", "69i", "65i", "65i" };
            arpeggios.arpegiate(notes,2);
            String toplay = arpeggios.getPatternString();
            Pattern pattern = new Pattern(toplay);


__________________________________________________________________________________

//                      test chord progressions

            Harmony harmony = new Harmony(a,strInput);
            harmony.createFunctionalHarmony(10);
            strInput = harmony.getStrInput();
            List<Integer> chordProgression = harmony.getChordProgression();
            List<Integer[]> chords = harmony.getChords();

            String patternString = "V0 ";
            for (Integer i: chordProgression){
//                System.out.print(i + " ");
                  patternString += chords.get(i)[0] + "h+" + chords.get(i)[1] + "h+" + chords.get(i)[2] + "h ";
            }
            System.out.println(patternString);
            harmony.decodeFunctionalHarmony(chordProgression);

________________________________________________________________________--

                    print all chords possible

//            for (int i = 0; i < 32; i++){
//                Integer[] a = key.generateKeyTest(i);
//                Harmony harmony = new Harmony(a,strInput);
//                harmony.printChords();
//                System.out.println();
//            }
