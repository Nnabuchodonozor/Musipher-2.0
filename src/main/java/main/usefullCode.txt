
            /// ARPEGIOS
            Key key = new Key(strInput);
            Integer [] a = key.generateKey();
            strInput = key.getStrInput();
            Melody melody = new Melody(a);

//            for(int i = 1; i < a.length; i++){
//                System.out.print(a[i] + " ");
//            }
            String patternString = "V0 ";
            for(int i = 0; i < 25; i++) {
                melody.addRandomMelody(patternString, null, strInput);
                strInput = melody.getStrInput();
                patternString=melody.getPatternString();
            }
            pattern.add(melody.getPatternString());
//
            patternString += "V1 ";
            Arpeggios arpeggios = new Arpeggios(patternString);
            arpeggios.upUp(new String[] {"C3q","E3q","G3q"} ,6);
            pattern.add(arpeggios.getPatternString());



___________________________________________________________________________________________________




            //// TEST DRUMS

//            Drums drums = new Drums(strInput);
//            Rhythm rhythm = drums.generateDrums();
////            strInput = drums.getStrInput();
//            pattern.add(rhythm);
//            MidiFileManager.savePatternToMidi(pattern, new File("miusik.mid"));
//            Pattern mainPattern = MidiFileManager.loadPatternFromMidi(new File("miusik.mid"));
//            System.out.println(mainPattern.toString());
//            drums.parseDrums(mainPattern.toString());
//            String strOutput = drums.getStroutput();
//            midiUtils.evaluateDeciphering(strInput,strOutput);

            //// TEST DRUMS END


_______________________________________________________________________________________________________


            Key key = new Key(strInput);
            Integer [] a = key.generateKey();
            strInput = key.getStrInput();
            Melody melody = new Melody(a);

            //      random melody and arpegios

            String patternString = "V0 ";
            for(int i = 0; i < 25; i++) {
                melody.addRandomMelody(patternString, null, strInput);
                strInput = melody.getStrInput();
                patternString=melody.getPatternString();
            }
            pattern.add(melody.getPatternString());
//
            patternString += "V1 ";
            Arpeggios arpeggios = new Arpeggios(patternString);
            arpeggios.upUp(new String[] {"C3q","E3q","G3q"} ,6);
            pattern.add(arpeggios.getPatternString());

            MidiFileManager.savePatternToMidi(pattern, new File("miusik.mid"));
            Pattern mainPattern = MidiFileManager.loadPatternFromMidi(new File("miusik.mid"));
            System.out.println(mainPattern.toString());

_________________________________________________________________________________________________



__________________________________________________________________________________________



__________________________________________________________________________________

//                      test chord progressions

            Harmony harmony = new Harmony(a,strInput);
            harmony.createFunctionalHarmony(10);
            strInput = harmony.getStrInput();
            List<Integer> chordProgression = harmony.getChordProgression();
            List<Integer[]> chords = harmony.getChords();

            String patternString = "V0 ";
            for (Integer i: chordProgression){
//                System.out.print(i + " ");
                  patternString += chords.get(i)[0] + "h+" + chords.get(i)[1] + "h+" + chords.get(i)[2] + "h ";
            }
            System.out.println(patternString);
            harmony.decodeFunctionalHarmony(chordProgression);

________________________________________________________________________--

                    print all chords possible

//            for (int i = 0; i < 32; i++){
//                Integer[] a = key.generateKeyTest(i);
//                Harmony harmony = new Harmony(a,strInput);
//                harmony.printChords();
//                System.out.println();
//            }

_______________________________________________________________________

TEST RAW ENCRYPTION
//            SemanticUtils semanticUtils = new SemanticUtils();
//            semanticUtils.encryptToMIDIFromFile("image.jpg","password");
//            semanticUtils.decryptFromMIDIToFile("encryptedBytes","password");

//            semanticUtils.encryptToMIDIFromText("text","password");
//            semanticUtils.decryptFromMIDIToText("encryptedBytes","password");

